import java.util.ArrayDeque;
import java.util.Deque;
import java.util.ArrayList;

class Solution {
    public ArrayList<Integer> slidingMaximum(final int[] A, int B) {
        ArrayList<Integer> result = new ArrayList<>();

        // Step 1: Check for edge cases
        if (A == null || A.length == 0 || B <= 0) {
            return result;
        }

        int n = A.length;
        Deque<Integer> deque = new ArrayDeque<>();

        // Step 2: Iterate through the array
        for (int i = 0; i < n; i++) {
            // Remove elements that are out of the current window from the front of the deque
            while (!deque.isEmpty() && deque.peek() < i - B + 1) {
                deque.poll();
            }

            // Remove elements that are smaller than the current element from the back of the deque
            while (!deque.isEmpty() && A[deque.peekLast()] < A[i]) {
                deque.pollLast();
            }

            // Add the current index to the deque
            deque.offer(i);

            // Add the maximum element in the current window to the result
            if (i >= B - 1) {
                result.add(A[deque.peek()]);
            }
        }

        return result;
    }
}
