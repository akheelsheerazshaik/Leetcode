NEW xvs
dsvsd
vsdv
class Solution {
    public String minRemoveToMakeValid(String s) {
        // Initialize a stack to keep track of indices of unmatched parentheses
        Stack<Integer> stack = new Stack<>();

        // Iterate through each character in the input string
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            // If the character is an alphabetic character, ignore it
            if (Character.isAlphabetic(ch))
                continue;

            // If the character is '(', push its index onto the stack
            if (ch == '(')
                stack.push(i);
            else {
                // If the character is ')', check if there is a matching '(' on the stack
                if (!stack.isEmpty() && s.charAt(stack.peek()) == '(')
                    stack.pop(); // Pop the index from the stack, as the parentheses match
                else
                    stack.push(i); // Otherwise, push the current index onto the stack
            }
        }

        // Build the result string by excluding characters at indices in the set
        StringBuilder result = new StringBuilder();
        HashSet<Integer> set = new HashSet<>(stack);
        for (int i = 0; i < s.length(); i++)
            if (!set.contains(i))
                result.append(s.charAt(i));

        // Return the final result as a string
        return result.toString();
    }
}
